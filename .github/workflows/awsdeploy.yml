name: Deployment
on:
  push:
    branches:
      - master
      - staging
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: awsdeploy # Specify the environment to access its secrets
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_DEFAULT_REGION }}
    
    - name: Deploy to EC2
      env:
        REPO_NAME: ${{ github.event.repository.name }}
        PROD_DIRECTORY: "/home/ubuntu/projects/${{ github.event.repository.name }}/production"
        STAGING_DIRECTORY: "/home/ubuntu/projects/${{ github.event.repository.name }}/staging"
        # Set staging instance ID to production ID if staging ID is not available
        STAGING_INSTANCE: ${{ secrets.STAGING_EC2_INSTANCE_ID || secrets.PROD_EC2_INSTANCE_ID }}
      run: |
        # Determine target directory and instance based on branch
        if [[ $GITHUB_REF == "refs/heads/master" ]]; then
          TARGET_DIRECTORY="$PROD_DIRECTORY"
          TARGET_INSTANCE="${{ secrets.PROD_EC2_INSTANCE_ID }}"
        elif [[ $GITHUB_REF == "refs/heads/staging" ]]; then
          TARGET_DIRECTORY="$STAGING_DIRECTORY"
          TARGET_INSTANCE="$STAGING_INSTANCE"
        else
          echo "Unsupported branch: $GITHUB_REF" && exit 1
        fi
        echo "Deploying to $TARGET_DIRECTORY on instance $TARGET_INSTANCE"
        # Use AWS CLI with modified git commands
        aws ssm send-command \
          --targets "Key=instanceIds,Values=$TARGET_INSTANCE" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploying application" \
          --parameters '{
            "commands":[
              "if [ ! -d '"$TARGET_DIRECTORY"' ]; then",
              "  sudo -u ubuntu mkdir -p '"$TARGET_DIRECTORY"'",
              "fi",
              "cd '"$TARGET_DIRECTORY"'",
              "if [ ! -d .git ]; then",
              "  sudo -u ubuntu git init",
              "  sudo -u ubuntu git remote add origin https://'"${{ secrets.TOKEN_GITHUB }}"'@github.com/${{ github.repository }}.git",
              "  sudo -u ubuntu git fetch origin",
              "  sudo -u ubuntu git checkout -b '"$GITHUB_REF_NAME"' --track origin/'"$GITHUB_REF_NAME"'",
              "else",
              "  sudo -u ubuntu git reset --hard",
              "  sudo -u ubuntu git pull https://'"${{ secrets.TOKEN_GITHUB }}"'@github.com/${{ github.repository }}.git '"$GITHUB_REF_NAME"'",
              "fi"
            ]
          }' \
          --output text
